#!/usr/bin/env python3
"""
Script para descargar y configurar los modelos dlib necesarios
para el sistema de reconocimiento facial acad√©mico
"""

import os
import sys
import urllib.request
import bz2
import logging
from pathlib import Path

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class DlibModelSetup:
    """Configurador de modelos dlib para el proyecto acad√©mico"""

    def __init__(self):
        self.models_dir = Path(__file__).parent / "dlib_models"
        self.models_dir.mkdir(exist_ok=True)

        self.models = {
            "shape_predictor_68_face_landmarks.dat": {
                "url": "http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2",
                "description": "Predictor de 68 landmarks faciales",
                "size_mb": "95 MB comprimido, ~200 MB descomprimido"
            },
            "dlib_face_recognition_resnet_model_v1.dat": {
                "url": "http://dlib.net/files/dlib_face_recognition_resnet_model_v1.dat.bz2",
                "description": "Modelo ResNet para embeddings 128D",
                "size_mb": "22 MB comprimido, ~45 MB descomprimido"
            }
        }

    def check_existing_models(self):
        """Verificar qu√© modelos ya est√°n descargados"""
        logger.info("üîç Verificando modelos existentes...")

        existing_models = []
        missing_models = []

        for model_name in self.models.keys():
            model_path = self.models_dir / model_name
            if model_path.exists():
                size_mb = model_path.stat().st_size / (1024 * 1024)
                logger.info(f"   ‚úÖ {model_name} - {size_mb:.1f} MB")
                existing_models.append(model_name)
            else:
                logger.info(f"   ‚ùå {model_name} - No encontrado")
                missing_models.append(model_name)

        return existing_models, missing_models

    def download_model(self, model_name: str) -> bool:
        """Descargar un modelo espec√≠fico"""
        model_info = self.models[model_name]
        model_path = self.models_dir / model_name
        compressed_path = model_path.with_suffix(model_path.suffix + '.bz2')

        try:
            logger.info(f"üì• Descargando {model_name}...")
            logger.info(f"   üìù {model_info['description']}")
            logger.info(f"   üìä Tama√±o: {model_info['size_mb']}")
            logger.info(f"   üîó URL: {model_info['url']}")

            # Descargar archivo comprimido
            urllib.request.urlretrieve(model_info['url'], compressed_path)
            logger.info(f"   ‚úÖ Descarga completada")

            # Descomprimir
            logger.info(f"   üì¶ Descomprimiendo...")
            with bz2.BZ2File(compressed_path, 'rb') as source:
                with open(model_path, 'wb') as target:
                    target.write(source.read())

            # Limpiar archivo comprimido
            compressed_path.unlink()

            # Verificar tama√±o final
            size_mb = model_path.stat().st_size / (1024 * 1024)
            logger.info(f"   ‚úÖ {model_name} listo - {size_mb:.1f} MB")

            return True

        except Exception as e:
            logger.error(f"   ‚ùå Error descargando {model_name}: {e}")

            # Limpiar archivos parciales
            for path in [model_path, compressed_path]:
                if path.exists():
                    path.unlink()

            return False

    def download_all_models(self):
        """Descargar todos los modelos necesarios"""
        existing_models, missing_models = self.check_existing_models()

        if not missing_models:
            logger.info("üéâ Todos los modelos ya est√°n disponibles")
            return True

        logger.info(f"üì• Descargando {len(missing_models)} modelo(s) faltante(s)...")

        success_count = 0
        total_count = len(missing_models)

        for model_name in missing_models:
            if self.download_model(model_name):
                success_count += 1
            else:
                logger.error(f"‚ùå Fall√≥ la descarga de {model_name}")

        if success_count == total_count:
            logger.info("üéâ Todos los modelos descargados exitosamente")
            return True
        else:
            logger.error(f"‚ùå Solo {success_count}/{total_count} modelos descargados")
            return False

    def verify_models(self):
        """Verificar que los modelos funcionan correctamente"""
        logger.info("üß™ Verificando funcionamiento de modelos...")

        try:
            import dlib

            # Verificar detector de rostros
            logger.info("   üîç Probando detector de rostros HOG...")
            face_detector = dlib.get_frontal_face_detector()
            logger.info("   ‚úÖ Detector HOG inicializado")

            # Verificar predictor de landmarks
            landmarks_path = self.models_dir / "shape_predictor_68_face_landmarks.dat"
            if landmarks_path.exists():
                logger.info("   üìç Probando predictor de landmarks...")
                shape_predictor = dlib.shape_predictor(str(landmarks_path))
                logger.info("   ‚úÖ Predictor de landmarks inicializado")
            else:
                logger.error("   ‚ùå Archivo de landmarks no encontrado")
                return False

            # Verificar encoder facial
            encoder_path = self.models_dir / "dlib_face_recognition_resnet_model_v1.dat"
            if encoder_path.exists():
                logger.info("   üß† Probando encoder ResNet...")
                face_encoder = dlib.face_recognition_model_v1(str(encoder_path))
                logger.info("   ‚úÖ Encoder ResNet inicializado")
            else:
                logger.error("   ‚ùå Archivo de encoder no encontrado")
                return False

            logger.info("üéâ Todos los modelos verificados exitosamente")
            return True

        except ImportError:
            logger.error("‚ùå dlib no est√° instalado. Ejecuta: pip install dlib")
            return False
        except Exception as e:
            logger.error(f"‚ùå Error verificando modelos: {e}")
            return False

    def get_models_info(self):
        """Obtener informaci√≥n detallada de los modelos"""
        logger.info("üìã Informaci√≥n de modelos dlib:")
        logger.info("=" * 60)

        total_size = 0

        for model_name, model_info in self.models.items():
            model_path = self.models_dir / model_name
            status = "‚úÖ Descargado" if model_path.exists() else "‚ùå Faltante"

            if model_path.exists():
                size_mb = model_path.stat().st_size / (1024 * 1024)
                total_size += size_mb
                size_str = f"{size_mb:.1f} MB"
            else:
                size_str = model_info['size_mb']

            logger.info(f"üìÑ {model_name}")
            logger.info(f"   Estado: {status}")
            logger.info(f"   Descripci√≥n: {model_info['description']}")
            logger.info(f"   Tama√±o: {size_str}")
            logger.info(f"   Ubicaci√≥n: {model_path}")
            logger.info("")

        logger.info(f"üìä Tama√±o total descargado: {total_size:.1f} MB")
        logger.info("=" * 60)

    def create_symlinks(self):
        """Crear enlaces simb√≥licos en ubicaciones comunes"""
        common_locations = [
            Path(__file__).parent / "app" / "models",
            Path(__file__).parent / "models",
            Path.home() / ".dlib" / "models"
        ]

        logger.info("üîó Creando enlaces simb√≥licos...")

        for location in common_locations:
            try:
                location.mkdir(parents=True, exist_ok=True)

                for model_name in self.models.keys():
                    source = self.models_dir / model_name
                    target = location / model_name

                    if source.exists() and not target.exists():
                        try:
                            # Intentar enlace simb√≥lico
                            target.symlink_to(source.resolve())
                            logger.info(f"   ‚úÖ {target}")
                        except OSError:
                            # Si falla, copiar archivo
                            import shutil
                            shutil.copy2(source, target)
                            logger.info(f"   üìã {target} (copia)")

            except Exception as e:
                logger.warning(f"   ‚ö†Ô∏è No se pudo crear enlace en {location}: {e}")


def main():
    """Funci√≥n principal del setup"""
    logger.info("ü§ñ SETUP DE MODELOS DLIB PARA RECONOCIMIENTO FACIAL ACAD√âMICO")
    logger.info("=" * 70)

    # Verificar que dlib est√© instalado
    try:
        import dlib

        # Intentar obtener versi√≥n (no todas las versiones tienen DLIB_VERSION)
        try:
            version = dlib.DLIB_VERSION
        except AttributeError:
            # Fallback: usar __version__ o detectar autom√°ticamente
            try:
                version = dlib.__version__
            except AttributeError:
                version = "19.22+ (Versi√≥n personalizada detectada)"

        logger.info(f"‚úÖ dlib {version} instalado")

        # Log adicional para tu versi√≥n espec√≠fica
        if "19.22.99" in str(version) or "win_amd64" in dlib.__file__:
            logger.info("üîß Versi√≥n local personalizada detectada (compatible)")

    except ImportError:
        logger.error("‚ùå dlib no est√° instalado")
        logger.error("üí° Para desarrollo local: pip install dlib-19.22.99-cp39-cp39-win_amd64.whl")
        logger.error("üí° Para Railway/Linux: pip install dlib")
        logger.error("üí° En sistemas Ubuntu/Debian: sudo apt-get install libopenblas-dev liblapack-dev")
        sys.exit(1)

    # Inicializar configurador
    setup = DlibModelSetup()

    # Mostrar informaci√≥n actual
    setup.get_models_info()

    # Descargar modelos faltantes
    logger.info("üöÄ Iniciando descarga de modelos...")
    if not setup.download_all_models():
        logger.error("‚ùå Error en la descarga de modelos")
        sys.exit(1)

    # Verificar que funcionan
    if not setup.verify_models():
        logger.error("‚ùå Error en la verificaci√≥n de modelos")
        sys.exit(1)

    # Crear enlaces simb√≥licos
    setup.create_symlinks()

    # Informaci√≥n final
    logger.info("\nüéâ SETUP COMPLETADO EXITOSAMENTE")
    logger.info("=" * 50)
    logger.info("üìÅ Modelos instalados en: " + str(setup.models_dir))
    logger.info("üöÄ Tu sistema est√° listo para reconocimiento facial acad√©mico")
    logger.info("\nüìù JUSTIFICACI√ìN ACAD√âMICA:")
    logger.info("‚úÖ Modelos dlib explicados paso a paso")
    logger.info("‚úÖ Proceso de extracci√≥n documentado")
    logger.info("‚úÖ Sistema de aprendizaje adaptativo")
    logger.info("‚úÖ Comparaci√≥n multi-m√©trica")
    logger.info("‚úÖ NO usa face_recognition como caja negra")

    logger.info("\n‚ñ∂Ô∏è  Pr√≥ximos pasos:")
    logger.info("1. Ejecutar la aplicaci√≥n: python -m app.main")
    logger.info("2. Probar reconocimiento: POST /api/recognize")
    logger.info("3. Ver documentaci√≥n: http://localhost:8000/docs")


if __name__ == "__main__":
    main()